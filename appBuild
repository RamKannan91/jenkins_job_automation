package common
	def antVersion = 'Ant1.8.2'
	def checkoutSVN(targetDir, repoURL) {
    checkout([$class: 'SubversionSCM', 
          additionalCredentials: [], 
          excludedCommitMessages: '', 
          excludedRegions: '', 
          excludedRevprop: '', 
          excludedUsers: '', 
          filterChangelog: false, 
          ignoreDirPropChanges: false, 
          includedRegions: '', 
          locations: [[credentialsId: '', 
                       depthOption: 'infinity', 
                       ignoreExternalsOption: true, 
                       local: targetDir, 
                       remote: repoURL]], 
          workspaceUpdater: [$class: 'UpdateUpdater']])
	}
	
	node() {
		deleteDir()
		timeout(time: 10, unit: 'MINUTES') {
    try {
        stage('SCM Code Checkout') {
			     println("===== Checking Out ${env.PROJ_NAME} ======")
          checkoutSVN("${env.PROJ_NAME}/Module/configuration", "https://gsvnpapp1.germania-ins.com/svn/guidewire/applications/branches/${env.VERSION_NAME}/${env.PROJ_NAME}/modules/configuration@HEAD")
          println("===== Checking Out SuiteShared ======")
          checkoutSVN("ext_temp/BillingCenter/modules/configuration", "https://gsvnpapp1.germania-ins.com/svn/guidewire/InsuranceSuite/applications/branches/Release_2.7.1/SuiteShared/modules/configuration@HEAD")
        }
    } catch (err) {
        println("================ Error: ${err}")
        currentBuild.result = "FAILURE"
        sh 'exit 0'
    }
    
    
     stage('Build gw_update') {
        withEnv( ["ANT_HOME=${tool antVersion}"] ) {
            sh '$ANT_HOME/bin/ant gw_update -f ${HUDSON_HOME}/continuous-build.xml -DforceUnzip=true -Dcustomer.workspace.home=${WORKSPACE}'
        }
     }
	   stage('Build clean-dist') {
        withEnv( ["ANT_HOME=${tool antVersion}"] ) {
            sh '$ANT_HOME/bin/ant gw_update -f ${HUDSON_HOME}/continuous-build.xml -DforceUnzip=true -Dcustomer.workspace.home=${WORKSPACE}'
        }
     }
     stage('Build regen-soap-api') {
        withEnv( ["ANT_HOME=${tool antVersion}"] ) {
            sh '$ANT_HOME/bin/ant gw_update -f ${HUDSON_HOME}/continuous-build.xml -DforceUnzip=true -Dcustomer.workspace.home=${WORKSPACE}'
        }
     }
	   stage('Build verify-resources') {
        withEnv( ["ANT_HOME=${tool antVersion}"] ) {
            sh '$ANT_HOME/bin/ant gw_update -f ${HUDSON_HOME}/continuous-build.xml -DforceUnzip=true -Dcustomer.workspace.home=${WORKSPACE}'
        }
     }
	   stage('Build regenerateNewCheckSums') {
        withEnv( ["ANT_HOME=${tool antVersion}"] ) {
            sh '$ANT_HOME/bin/ant gw_update -f ${HUDSON_HOME}/continuous-build.xml -DforceUnzip=true -Dcustomer.workspace.home=${WORKSPACE}'
        }
     }
     stage('Build run-unit-tests') {
        withEnv( ["ANT_HOME=${tool antVersion}"] ) {
            sh '$ANT_HOME/bin/ant gw_update -f ${HUDSON_HOME}/continuous-build.xml -DforceUnzip=true -Dcustomer.workspace.home=${WORKSPACE}'
        }
     }
     stage('Build buildinfo') {
        withEnv( ["ANT_HOME=${tool antVersion}"] ) {
            sh '$ANT_HOME/bin/ant gw_update -f ${HUDSON_HOME}/continuous-build.xml -DforceUnzip=true -Dcustomer.workspace.home=${WORKSPACE}'
        }
     }
     stage('Build build-gw-ear') {
        withEnv( ["ANT_HOME=${tool antVersion}"] ) {
            sh '$ANT_HOME/bin/ant gw_update -f ${HUDSON_HOME}/continuous-build.xml -DforceUnzip=true -Dcustomer.workspace.home=${WORKSPACE}'
        }
     }
     stage('Build update-manifest') {
        withEnv( ["ANT_HOME=${tool antVersion}"] ) {
            sh '$ANT_HOME/bin/ant gw_update -f ${HUDSON_HOME}/continuous-build.xml -DforceUnzip=true -Dcustomer.workspace.home=${WORKSPACE}'
        }
     }
    }
  }